import os
import sqlite3
from backend.aprendizado import carregar_todos_documentos
from backend.indexador import indexar_mbft

print("\n==============================")
print("üöÄ Iniciando rotina autom√°tica da Babix IA")
print("==============================\n")

# 1Ô∏è‚É£ Garante que a pasta do banco exista
os.makedirs("backend/db", exist_ok=True)

# 2Ô∏è‚É£ Cria o banco se n√£o existir
db_path = "backend/db/conhecimento.db"
if not os.path.exists(db_path):
    print("‚öôÔ∏è Criando banco de conhecimento...")
    conn = sqlite3.connect(db_path)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS documentos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT UNIQUE,
            tipo TEXT,
            caminho TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS fichas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            codigo TEXT UNIQUE,
            titulo TEXT,
            resumo TEXT,
            conteudo TEXT,
            documento_id INTEGER,
            hash TEXT UNIQUE,
            embedding BLOB,
            FOREIGN KEY (documento_id) REFERENCES documentos (id)
        )
    """)
    conn.commit()
    conn.close()
    print("‚úÖ Banco criado com sucesso.")
else:
    print("üß† Banco j√° existe ‚Äî continuando...")

# 3Ô∏è‚É£ L√™ e indexa todos os PDFs da pasta backend/dados
try:
    print("üìò Iniciando leitura e aprendizado...")
    total = carregar_todos_documentos("backend/dados")
    print(f"‚úÖ {total} documentos processados.")
except Exception as e:
    print(f"‚ùå Erro ao ler documentos: {e}")

# 4Ô∏è‚É£ Reindexa fichas MBFT (divide em c√≥digos)
try:
    print("üìë Reindexando fichas MBFT...")
    indexar_mbft()
    print("üèÅ Indexa√ß√£o completa!")
except Exception as e:
    print(f"‚ö†Ô∏è Erro ao indexar fichas: {e}")

print("\n‚úÖ Babix IA pronta para uso!\n")
