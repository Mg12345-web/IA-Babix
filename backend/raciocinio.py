import sqlite3
import re
from pathlib import Path
from difflib import SequenceMatcher
from typing import Optional, List, Tuple, Dict

# Caminho do banco
BASE_DIR = Path(__file__).resolve().parent.parent
DB_PATH = BASE_DIR / "backend" / "db" / "conhecimento.db"

# =============================
# Fun√ß√µes utilit√°rias
# =============================

def _conn():
    return sqlite3.connect(str(DB_PATH))

def _sim(a: str, b: str) -> float:
    """Calcula similaridade textual simples"""
    return SequenceMatcher(None, (a or "").lower(), (b or "").lower()).ratio()

# ============================================================
# üîπ Parte 1 ‚Äî Fun√ß√µes antigas (mantidas)
# ============================================================

def obter_ficha_por_codigo(codigo: str) -> Optional[dict]:
    with _conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT f.codigo, f.titulo, f.conteudo, d.nome
            FROM fichas f
            JOIN documentos d ON d.id = f.documento_id
            WHERE f.codigo = ?
            ORDER BY f.id DESC
            LIMIT 1
        """, (codigo,))
        row = cur.fetchone()
    if not row:
        return None
    return {
        "codigo": row[0],
        "titulo": row[1] or "",
        "conteudo": row[2] or "",
        "documento": row[3] or "",
    }

def buscar_fichas_por_texto(q: str, limit: int = 5) -> List[Tuple[float, dict]]:
    with _conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT f.codigo, f.titulo, f.conteudo, d.nome
            FROM fichas f
            JOIN documentos d ON d.id = f.documento_id
        """)
        rows = cur.fetchall()

    scored = []
    for codigo, titulo, conteudo, doc in rows:
        score = max(_sim(q, titulo), _sim(q, conteudo))
        scored.append((score, {
            "codigo": codigo,
            "titulo": titulo,
            "conteudo": conteudo,
            "documento": doc
        }))
    scored.sort(key=lambda x: x[0], reverse=True)
    return scored[:limit]

def formatar_explicacao(f: dict) -> str:
    linhas = [
        f"üßæ **Ficha {f['codigo']} ‚Äî Explica√ß√£o**",
        f"üöó **Descri√ß√£o:** {f['titulo'] or '(sem t√≠tulo)'}",
        f"üìò **Fonte:** {f['documento']}",
        "\nüß† **Resumo:**",
        f"{(f['conteudo'][:1200] + '...') if len(f['conteudo']) > 1200 else f['conteudo']}",
        "\n‚öôÔ∏è **Interpreta√ß√£o autom√°tica:** Aplicar conforme descrito. Verifique exce√ß√µes e observa√ß√µes de 'quando n√£o autuar'."
    ]
    return "\n".join(linhas)

def _texto_completo() -> str:
    with _conn() as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT conteudo FROM fichas 
            WHERE codigo = 'MBFT-GERAL' 
            ORDER BY id DESC LIMIT 1
        """)
        row = cur.fetchone()
    return row[0] if row else ""

def contar_fichas() -> int:
    with _conn() as conn:
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM fichas WHERE codigo != 'MBFT-GERAL'")
        return cur.fetchone()[0]

def resposta_conceito_mbft() -> str:
    texto = _texto_completo()
    total = len(texto.split()) if texto else 0
    return (
        "üìö **MBFT ‚Äî Manual Brasileiro de Fiscaliza√ß√£o de Tr√¢nsito**\n"
        "Conjunto de fichas e orienta√ß√µes operacionais para autua√ß√£o, com amparo no CTB. "
        f"Base atual carregada com ~{total} palavras e {contar_fichas()} fichas indexadas."
    )

# ============================================================
# üîπ Parte 2 ‚Äî NOVO RACIOC√çNIO (Campo de Observa√ß√µes)
# ============================================================

def analisar_observacao(texto: str) -> Dict[str, str]:
    """
    Analisa o texto do campo Observa√ß√µes e indica se est√° correto ou incorreto
    conforme as fichas do MBFT.
    """
    if not texto or len(texto.strip()) < 10:
        return {"status": "‚ùå Texto muito curto.", "detalhe": "Forne√ßa o texto completo do campo Observa√ß√µes."}

    candidatos = buscar_fichas_por_texto(texto, limit=3)
    if not candidatos:
        return {"status": "‚ùå Nenhuma ficha compat√≠vel encontrada."}

    melhor_score, melhor_ficha = candidatos[0]
    codigo = melhor_ficha["codigo"]
    titulo = melhor_ficha["titulo"]
    conteudo = melhor_ficha["conteudo"]

    # Heur√≠stica de coer√™ncia
    texto_lower = texto.lower()
    conteudo_lower = conteudo.lower()
    match = _sim(texto_lower, conteudo_lower)

    if match > 0.65:
        parecer = "‚úÖ Correto ‚Äî descri√ß√£o condiz com o enquadramento."
    elif 0.4 < match <= 0.65:
        parecer = "‚ö†Ô∏è Parcial ‚Äî texto parcialmente coerente com a ficha."
    else:
        parecer = "‚ùå Incorreto ‚Äî texto n√£o condiz com a infra√ß√£o descrita."

    return {
        "codigo": codigo,
        "titulo": titulo,
        "parecer": parecer,
        "similaridade": f"{match:.2f}"
    }

def gerar_resposta_observacao(texto: str) -> str:
    """Gera a resposta formatada do campo de observa√ß√£o."""
    resultado = analisar_observacao(texto)
    if "codigo" not in resultado:
        return resultado["status"]

    return f"""
üìã **An√°lise de Observa√ß√£o**

**Texto informado:**
{texto.strip()}

**Ficha sugerida:** {resultado['codigo']} ‚Äî {resultado['titulo']}

**üß† Interpreta√ß√£o autom√°tica:**
{resultado['parecer']} (similaridade {resultado['similaridade']})
""".strip()

# ============================================================
# üîπ Parte 3 ‚Äî Roteador principal (mantido e ampliado)
# ============================================================

def gerar_resposta(pergunta: str) -> str:
    """
    Mant√©m compatibilidade com o modo de chat anterior.
    Agora identifica automaticamente se √© uma 'observa√ß√£o' ou pergunta geral.
    """
    if not pergunta or not pergunta.strip():
        return "Fa√ßa sua pergunta sobre o MBFT ou envie o campo de observa√ß√µes para an√°lise."

    # üîç Novo modo: an√°lise de observa√ß√µes
    if any(p in pergunta.lower() for p in ["observa√ß√£o", "observacoes", "analisar", "campo do ait"]):
        # Remove palavras de comando e analisa o conte√∫do
        texto_limpo = re.sub(r"(analisar|observa√ß(√µes|ao)|campo do ait|verifique|verificar)", "", pergunta, flags=re.IGNORECASE)
        return gerar_resposta_observacao(texto_limpo.strip())

    # Modo antigo: perguntas normais
    m = re.search(r"\\b\\d{3}-\\d{2}\\b", pergunta)
    if m:
        codigo = m.group(0)
        f = obter_ficha_por_codigo(codigo)
        if f:
            return formatar_explicacao(f)
        return f"N√£o encontrei a ficha {codigo} nas fontes carregadas."

    if re.search(r"\\b(o que √©|o que significa|explique)\\b.*\\bmbft\\b", pergunta, re.IGNORECASE):
        return resposta_conceito_mbft()

    candidatos = buscar_fichas_por_texto(pergunta, limit=1)
    if candidatos and candidatos[0][0] > 0.25:
        _, ficha = candidatos[0]
        return formatar_explicacao(ficha)

    texto = _texto_completo()
    if not texto:
        return "Base do MBFT ainda n√£o carregada."
    partes = re.split(r'(?<=[\\.!?])\\s+', texto)
    melhor = max(partes, key=lambda s: _sim(s, pergunta)) if partes else texto[:400]
    return f"üìò Baseando-me no MBFT: {melhor.strip()[:1200]}"
